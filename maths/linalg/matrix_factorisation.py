def factor_SL2Z(a, b, c, d) -> str:
    """SL2(Z) is generated by S and T. Finds such a factorisation."""
    # S = [0 -1]
    #     [1  0]
    #     
    # T = [1 1]
    #     [0 1]

    Tinv = 'SSSTSTS'
    assert a*d - b*c == 1

    def factor(a, b, c, d) -> str:
        if a == 0: # ad - bc = 1 => bc = -1 => b = -c = Â±1
            q = d//c
            return ('S' if c > 0 else 'SSS') + ('T'*q if q > 0 else Tinv*-q)

        if abs(a) <= abs(b):
            q, r = divmod(b, a)
            return factor(a, r, c, d - c*q) + ('T'*q if q > 0 else Tinv*-q)

        if abs(a) > abs(b):
            return factor(b, -a, d, -c) + 'S'

    fs = factor(a, b, c, d)
    return fs.replace('SS', '') + 'SS'*(fs.count('SS') % 2)